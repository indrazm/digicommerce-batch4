// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  ILLUSTRATION
  FONTS
  UIKIT
  TEMPLATE
  MOCKUPS
}

model User {
  id String @id @default(cuid())
  firstName String
  lastName String
  username String @unique
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[]
  comment Comment[]
  order Order[]
  review Review[]
}

model Product {
  id String @id @default(cuid())
  name String
  slug String
  description String
  featuredImage String
  images String
  price Int
  category Category
  authorId String
  author User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment Comment[]
  orderedProduct OrderedProduct[]
}

model Comment {
  id String @id @default(cuid())
  comment String
  productId String
  product Product @relation(fields: [productId], references: [id])
  authorId String
  author User @relation(fields: [authorId], references: [id])
}

model Order {
  id String @id @default(cuid())
  buyerId String
  buyer User @relation(fields: [buyerId], references: [id])

  orderedProduct OrderedProduct[]
  review Review?
}

model OrderedProduct {
  id String @id @default(cuid())
  productId String
  product Product @relation(fields: [productId], references: [id])
  orderId String
  order Order @relation(fields: [orderId], references: [id])
}

model Review {
  id String @id @default(cuid())
  review String
  rating Int
  orderId String @unique
  order Order @relation(fields: [orderId], references: [id])
  authorId String
  author User @relation(fields: [authorId], references: [id])
}